.container{
    margin: 30px;
    width: 400px;
    height: 400px;
    background-color: lightpink;
    /* font-size: 0; */
}

/* IMPORTANT NOTE */
/* INLINE vs INLINE-BLOCK
    In inline elements, we cannot set height and width of the element, but if we make it inline-block,
    we can. Also there is a space between inline-block elements and in inline elements which is because we
    formatted the html document normally like:
    <div></div>
    <div></div>
    The space between the two div creates a space between the blocks being displayed.
    To remove this,
    1.) Make font-size in parent element = 0 OR
    2.) Format the document in the fashion: <div></div><div></div>
    3.) Make the parent element a flex
    This is so in order to differentiate between inline and inline-block elements. */

/* NOTE: If we make parent element to FLEX then we do not need to make inline-block in place of inline */
.item{
    height: 50px;
    width: 50px;
    margin: 20px;
    background-color: darkcyan;
    border: solid black;
    display: inline-block;

    animation: bounce 2s;
    animation-iteration-count: infinite;
}

/* We add animations as follows:  */
/* @keyframes â€” Describes the aspect of intermediate steps in a CSS animation sequence. */
@keyframes bounce {
    /* we write frames inside it */
    /* when 0% of my animation is done, what rules do i want */
    0%{
    
    }
    /* when 50% of my animation is done what rules do i want. Note we can write any number of % of our choice */
    50%{
        transform: translateY(300px);
    }
    100%{
        
    }
}

 
/* Note all boxes reach to bottom at the same time */

/* By default, the animation-timing-function is ease-in-out, means slow start, slow end and fast in the middle
 */
.one{
    /* ease in means that the box will start slow but ends fast */
    animation-timing-function: ease-in;
}
.two{
    /* ease-out means starts fast but ends slow */
    animation-timing-function: ease-out;
}
.three{
    animation-timing-function: linear;
}